name: Test workflow
on:
  push:
    branches:
      - main
  repository_dispatch:
    types: [manual-approve-command]
  pull_request_target:
    branches:
      - main

jobs:
  manually_approved:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.manually_approved.outputs.result }}
    steps:
      - name: Check if was approved manually
        id: manually_approved
        run: |
          manually_approved=${{ github.event_name == 'repository_dispatch' && github.event.client_payload.slash_command.args.named.sha != '' && contains(github.event.client_payload.pull_request.head.sha, github.event.client_payload.slash_command.args.named.sha) }}
          echo ::set-output name=result::"$manually_approved"
  is_organization_member:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.is_organization_member.outputs.result }}
    steps:
      - name: Check if organization member
        id: is_organization_member
        uses: yevgenypats/is-organization-member@646ee210c04d55d8b7f3a591722d06eb16310236
        with:
          organization: cloudquery
          username: ${{ github.actor }}
          token: ${{ secrets.GH_PAT }}

  lint_doc:
    needs: [is_organization_member, manually_approved]
    if: needs.is_organization_member.outputs.status == 'true' || needs.manually_approved.outputs.status == 'true'
    runs-on: ubuntu-latest
    steps:
      # Set required ok_to_test check
      - uses: myrotvorets/set-commit-status-action@1.1.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: "success"
          sha: "${{ github.event.client_payload.slash_command.args.named.sha || github.event.pull_request.head.sha || github.sha }}"
          context: ok_to_test

      # Continue with regular CI flow
      - name: Fork based /manual-approve checkout
        uses: actions/checkout@v3
        if: github.event_name == 'repository_dispatch'
        with:
          ref: "refs/pull/${{ github.event.client_payload.pull_request.number }}/merge"
      - uses: actions/checkout@v3
        if: github.event_name == 'pull_request_target'
        with:
          ref: ${{github.event.pull_request.head.ref}}
          repository: ${{github.event.pull_request.head.repo.full_name}}
      - uses: actions/checkout@v3
        if: github.event_name == 'push'
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - '!(ignore/**/*)'
      - name: Set up Go 1.x
        if: steps.changes.outputs.src == 'true'
        run: echo "Hello World"
        id: last_step

      # Update the exiting check run if running from manual approval flow
      - uses: actions/github-script@v6
        if: ${{ always() && github.event_name == 'repository_dispatch' }}
        env:
          number: ${{ github.event.client_payload.pull_request.number }}
          job: ${{ github.job }}
          conclusion: ${{ job.status }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pull } = await github.rest.pulls.get({
              ...context.repo,
              pull_number: process.env.number
            });
            const ref = pull.head.sha;
            const { data: checks } = await github.rest.checks.listForRef({
              ...context.repo,
              ref
            });
            const check = checks.check_runs.filter(c => c.name === process.env.job);
            const { data: result } = await github.rest.checks.update({
              ...context.repo,
              check_run_id: check[0].id,
              status: 'completed',
              conclusion: process.env.conclusion
            });
            return result;
